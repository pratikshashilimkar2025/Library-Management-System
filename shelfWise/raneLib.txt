====================================================================================================
HOSPITAL MANAGEMENT SYSTEM - SPRING BOOT, REACT, MYSQL CODE
Project Path: D:\CDAC\WJP\librarymanagement1
Generated on: 2025-06-09 13:56:13
====================================================================================================



====================================================================================================
// File: src\main\java\com\cdac\Application.java
====================================================================================================

package com.cdac;

import org.modelmapper.Conditions;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.cdac.dto.BookDTO;
import com.cdac.entities.Book;

@SpringBootApplication //=@Configuration + @EnableAutoConfig +@CompScan
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@Bean // equivalent to <bean id ..../> in xml file
	ModelMapper mapper() {
		ModelMapper modelMapper = new ModelMapper();		
		modelMapper.getConfiguration()
		.setMatchingStrategy(MatchingStrategies.STRICT)
	.setPropertyCondition(Conditions.isNotNull());
		modelMapper.typeMap(BookDTO.class, Book.class).setConverter(ctx -> {
			BookDTO dto = ctx.getSource();
			Book book = new Book();

			book.setTitle(dto.getTitle());
			book.setAuthor(dto.getAuthor());
			book.setAvailable(dto.isAvailable());

			// Set issue date and due date using int days
			book.setIssueDate(java.time.LocalDate.now());
			book.setDueDate(java.time.LocalDate.now().plusDays(dto.getDueDate()));

			return book;
		});
		return modelMapper;
	}
	//configure PasswordEncoder as a spring bean 
	//- as the dependency of DaoAuthProvider
	// used to encrypt (SHA) incoming password
	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
}


====================================================================================================
// File: src\main\java\com\cdac\connection\CorsSupportConfig.java
====================================================================================================

package com.cdac.connection;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
public class CorsSupportConfig {

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(List.of("http://localhost:5173")); // match your @CrossOrigin
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}



====================================================================================================
// File: src\main\java\com\cdac\controller\BookController.java
====================================================================================================

package com.cdac.controller;

import com.cdac.dto.BookDTO;
import com.cdac.service.BookService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/books")
public class BookController {

    @Autowired
    private BookService bookService;

    
    @PostMapping("/add")
    public ResponseEntity<BookDTO> createBook(@Valid @RequestBody BookDTO bookDTO) {
        return ResponseEntity.ok(bookService.createBook(bookDTO));
    }

   
    @PutMapping("/update/{id}")
    public ResponseEntity<BookDTO> updateBook(@PathVariable Long id, @Valid @RequestBody BookDTO bookDTO) {
        return ResponseEntity.ok(bookService.updateBook(id, bookDTO));
    }

   
    @GetMapping("/get")
    public ResponseEntity<List<BookDTO>> getAllBooks() {
        return ResponseEntity.ok(bookService.getAllBooks());
    }

   
    @GetMapping("/{id}")
    public ResponseEntity<BookDTO> getBookById(@PathVariable Long id) {
        return ResponseEntity.ok(bookService.getBookById(id));
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {
        bookService.deleteBook(id);
        return ResponseEntity.noContent().build();
    }
    
    @GetMapping("/softdelete/{id}")
    public ResponseEntity<String> softDeleteBook(@PathVariable Long id) {
        System.out.println("in delete " + id);
        bookService.softDeleteBook(id); // this method should handle the logic
        return ResponseEntity.ok("Book with ID " + id + " soft-deleted successfully.");
    }

}

====================================================================================================
// File: src\main\java\com\cdac\controller\SignIn_SignUpController.java
====================================================================================================

package com.cdac.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cdac.security.JwtUtils;
import com.cdac.dto.UserSignInRequest;
import com.cdac.dto.AuthResponse;
import com.cdac.dto.AddAdminDTO;
import com.cdac.dto.AddUserDTO;
import com.cdac.service.AdminService;
import com.cdac.service.UserService;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/auth")
@AllArgsConstructor
public class SignIn_SignUpController {
	
	
	private final AdminService adminService;
	private final AuthenticationManager authenticationManager;
	
	private final UserService userService;
	private JwtUtils jwtUtils;
//	@Autowired
//	private UserService userService;
//
//	public SignIn_SignUpController() {
//		System.out.println("in ctor of "+getClass());
//	}
	
	@PostMapping("/admin/signup")
	public ResponseEntity<?> getAdminSignUp(@RequestBody @Valid  AddAdminDTO reqDTO){
		System.out.println("in add "+reqDTO);
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(adminService.addAdmin(reqDTO));
	}
	
	@PostMapping("/user/signup")
	public ResponseEntity<?> getUserSignUp(@RequestBody @Valid AddUserDTO reqDTO){
		System.out.println("in add "+reqDTO);
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(userService.addUser(reqDTO));
	}
	
	@PostMapping("/user/signin")
	public ResponseEntity<?> getUserSignUp(@RequestBody @Valid UserSignInRequest dto){
		System.out.println("in user sign in " + dto);
		// 1. create Authentication token (UsernamePasswordAuthToken - username(em) ,
		// pwd
		UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(dto.getEmail(),
				dto.getPassword());
		System.out.println("is authenticated " + authToken.isAuthenticated());// f
		// 2. invoke AuthenticationManager's - authenticate method - spring sec supplied
		Authentication successfulAuth = authenticationManager.authenticate(authToken);
		System.out.println("is authenticated " + successfulAuth.isAuthenticated());// true
		System.out.println("principal " + successfulAuth.getPrincipal());// user details + granted authorities
		System.out.println("principal class" + successfulAuth.getPrincipal().getClass());// com.app.entities.UserEntity
																							// - UserDetails
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(new AuthResponse("successful login ....", 
						jwtUtils.generateJwtToken(successfulAuth)
		));
		
	}
	@PostMapping("/admin/signin")
	public ResponseEntity<?> getAdminSignUp(@RequestBody @Valid UserSignInRequest dto){
		System.out.println("in admin sign in " + dto);
		// 1. create Authentication token (UsernamePasswordAuthToken - username(em) ,
		// pwd
		UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(dto.getEmail(),
				dto.getPassword());
		System.out.println("is authenticated " + authToken.isAuthenticated());// f
		// 2. invoke AuthenticationManager's - authenticate method - spring sec supplied
		Authentication successfulAuth = authenticationManager.authenticate(authToken);
		System.out.println("is authenticated " + successfulAuth.isAuthenticated());// true
		System.out.println("principal " + successfulAuth.getPrincipal());// user details + granted authorities
		System.out.println("principal class" + successfulAuth.getPrincipal().getClass());// com.app.entities.UserEntity
		// - UserDetails
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(new AuthResponse("successful login ....", 
						jwtUtils.generateJwtToken(successfulAuth)
						));
	}
	
	
	
	
}


====================================================================================================
// File: src\main\java\com\cdac\controller\UserController.java
====================================================================================================

package com.cdac.controller;

public class UserController {
	
}


====================================================================================================
// File: src\main\java\com\cdac\custom_exception_handler\GlobalExceptionHandler.java
====================================================================================================

package com.cdac.custom_exception_handler;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.cdac.custom_exceptions.ResourceNotFoundException;
import com.cdac.dto.ApiResponse;

@RestControllerAdvice // =@ControllerAdvice => global exc handler class
//--common interceptor to intercept ALL excs in all contoller + @ResponseBody added impl. 
//on ret types of all req handling methods 
public class GlobalExceptionHandler {
	// method level anno to tell SC , following is an exc handling method : to
	// handle MethodArgumentNotValidException
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<?> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
		System.out.println("in method arg invalid " + e);
		List<FieldError> fieldErrors = e.getFieldErrors();// list of fiels having validation errs
		Map<String, String> map = fieldErrors.stream()
				.collect(Collectors.toMap
						(FieldError::getField, FieldError::getDefaultMessage));
		return ResponseEntity.status(HttpStatus.BAD_REQUEST)
				.body(map);
	}

	// method level anno to tell SC , following is an exc handling method : to
	// handle : ResourceNotFoundException
	@ExceptionHandler(ResourceNotFoundException.class)
	@ResponseStatus(value = HttpStatus.NOT_FOUND)
	public ApiResponse handleResourceNotFoundException(
			ResourceNotFoundException e) {
		System.out.println("in res not found " + e);
		return new ApiResponse(e.getMessage());
	}

	// method level anno to tell SC , following is an exc handling method : to
	// handle any other remaining exc => catch all
	@ExceptionHandler(RuntimeException.class)
	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
	public ApiResponse handleAnyException(RuntimeException e) {
		System.out.println("in catch-all " + e);
		return new ApiResponse(e.getMessage());
	}
}


====================================================================================================
// File: src\main\java\com\cdac\custom_exceptions\ApiException.java
====================================================================================================

package com.cdac.custom_exceptions;

public class ApiException extends RuntimeException {
	public ApiException(String message) {
		super(message);
	}
}


====================================================================================================
// File: src\main\java\com\cdac\custom_exceptions\ResourceNotFoundException.java
====================================================================================================

package com.cdac.custom_exceptions;

public class ResourceNotFoundException extends RuntimeException {
	public ResourceNotFoundException(String mesg) {
		super(mesg);
	}
}


====================================================================================================
// File: src\main\java\com\cdac\dao\AdminDao.java
====================================================================================================

package com.cdac.dao;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cdac.entities.Admin;

public interface AdminDao extends JpaRepository<Admin,Long>{

	boolean existsByEmail(String email);

	Optional<Admin> findByEmail(String email);

	

}


====================================================================================================
// File: src\main\java\com\cdac\dao\BookRepository.java
====================================================================================================

package com.cdac.dao;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.cdac.entities.Book;

public interface BookRepository extends JpaRepository<Book, Long> {

	List<Book> findByAvailableTrue();
}

====================================================================================================
// File: src\main\java\com\cdac\dao\Userdao.java
====================================================================================================

package com.cdac.dao;

import com.cdac.entities.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface Userdao extends JpaRepository<User, Long> {
    //Optional<User> findByUsername(String email);

	boolean existsByEmail(String email);

	Optional<User> findByEmail(String email);
}

====================================================================================================
// File: src\main\java\com\cdac\dto\AddAdminDTO.java
====================================================================================================

package com.cdac.dto;

import java.util.List;

import com.cdac.entities.Book;
import com.cdac.entities.UserRole;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AddAdminDTO {
	private String name;

    private String email;
    private UserRole role; 

    private String password;  
}


====================================================================================================
// File: src\main\java\com\cdac\dto\AddUserDTO.java
====================================================================================================

package com.cdac.dto;

import java.util.List;

import com.cdac.entities.Book;
import com.cdac.entities.UserRole;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AddUserDTO {
	private String name;

    private String email;

    private String password;
    private UserRole role; 
}


====================================================================================================
// File: src\main\java\com\cdac\dto\AdminDTO.java
====================================================================================================

package com.cdac.dto;

import java.util.List;

import com.cdac.entities.Book;
import com.cdac.entities.UserRole;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AdminDTO extends BaseDTO{
	private String name;

    private String email;

    private String password;
    private UserRole role; 
    private List<Book> addedBooks;
}


====================================================================================================
// File: src\main\java\com\cdac\dto\ApiResponse.java
====================================================================================================

package com.cdac.dto;

import java.time.LocalDateTime;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

//DTO :  resp DTO : to send API resp from rest server ---> rest clnt
@NoArgsConstructor
@Getter
@Setter
public class ApiResponse {
	private LocalDateTime timeStamp;
	private String message;
	public ApiResponse(String message) {
		super();
		this.message = message;
		this.timeStamp=LocalDateTime.now();
	}
	
}


====================================================================================================
// File: src\main\java\com\cdac\dto\AuthResponse.java
====================================================================================================

package com.cdac.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
public class AuthResponse {
	private String message;
	private String jwt;
}


====================================================================================================
// File: src\main\java\com\cdac\dto\AuthService.java
====================================================================================================

package com.cdac.dto;

public class AuthService {

}


====================================================================================================
// File: src\main\java\com\cdac\dto\BaseDTO.java
====================================================================================================

package com.cdac.dto;

import java.time.LocalDate;
import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class BaseDTO {
	@JsonProperty(access = Access.READ_ONLY)
	private Long id;
	@JsonProperty(access = Access.READ_ONLY)
	private LocalDate creationDate;
	@JsonProperty(access = Access.READ_ONLY)
	private LocalDateTime updatedOn;
}


====================================================================================================
// File: src\main\java\com\cdac\dto\BookDTO.java
====================================================================================================

package com.cdac.dto;



import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class BookDTO extends BaseDTO{
    private String title;

    private String author;

    private boolean available;
    
    private int dueDate;
}


====================================================================================================
// File: src\main\java\com\cdac\dto\LoginRequest.java
====================================================================================================

package com.cdac.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class LoginRequest {
    @NotBlank(message = "Username is mandatory")
    private String username;

    @NotBlank(message = "Password is mandatory")
    private String password;
}

====================================================================================================
// File: src\main\java\com\cdac\dto\RegisterRequest.java
====================================================================================================

package com.cdac.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;

@Data
public class RegisterRequest {
    @NotBlank(message = "Username is mandatory")
    @Size(min = 4, max = 20, message = "Username must be between 4 and 20 characters")
    private String username;

    @NotBlank(message = "Password is mandatory")
    @Size(min = 6, max = 40, message = "Password must be between 6 and 40 characters")
    private String password;

    @NotBlank(message = "Email is mandatory")
    @Email(message = "Email should be valid")
    private String email;
}

====================================================================================================
// File: src\main\java\com\cdac\dto\UserDTO.java
====================================================================================================

package com.cdac.dto;

import java.util.List;


import com.cdac.entities.Book;
import com.cdac.entities.UserRole;

import jakarta.persistence.Column;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserDTO extends BaseDTO{
	private String name;

    private String email;

    private String password;
    private UserRole role; 
    private List<Book> borrowedBooks;
}


====================================================================================================
// File: src\main\java\com\cdac\dto\UserSignInRequest.java
====================================================================================================

package com.cdac.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;


@Setter
@Getter
public class UserSignInRequest {
	@NotBlank
	private String email;
	@NotBlank
	private String password;	
}


====================================================================================================
// File: src\main\java\com\cdac\entities\Admin.java
====================================================================================================

package com.cdac.entities;


import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Table(name = "admin")
@NoArgsConstructor
@Getter
@Setter
@ToString(callSuper = true, exclude = "addedBooks")
public class Admin extends BaseEntity implements UserDetails{



	@Column(nullable = false)
    private String name;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;
    @Enumerated(EnumType.STRING)
    @Column(name = "user_role")
   	private UserRole role;
    
    @OneToMany(mappedBy = "addedBy", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List<Book> addedBooks;
    public Admin(String name, String email, String password, UserRole role, List<Book> addedBooks) {
		super();
		this.name = name;
		this.email = email;
		this.password = password;
		this.role = role;
		this.addedBooks = addedBooks;
	}
    public void addFoodItem(Book book)
	{
		this.addedBooks.add(book);//restaurant -> food item
		book.setAddedBy(this);//food item -> restaurant
	}
    public void removeFoodItem(Book book)
	{
		this.addedBooks.remove(book);
		book.setAddedBy(null);
	}
    @Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		// TODO Auto-generated method stub
		return List.of(new SimpleGrantedAuthority(this.role.name()));
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return email;
	}

}

====================================================================================================
// File: src\main\java\com\cdac\entities\BaseEntity.java
====================================================================================================

package com.cdac.entities;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/*
 * To declare a common base class - w/o any associated table
 * All other entities will extend n inherit fields
 */
@MappedSuperclass
@Getter
@Setter
@ToString
public class BaseEntity {
	// add common fields
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@CreationTimestamp
	@Column(name="creation_date")
	private LocalDate creationDate;
	@UpdateTimestamp
	@Column(name="updated_on")
	private LocalDateTime updatedOn;
}

====================================================================================================
// File: src\main\java\com\cdac\entities\Book.java
====================================================================================================

package com.cdac.entities;

import java.time.LocalDate;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Table(name = "book")
@NoArgsConstructor
@Getter
@Setter
@ToString(callSuper = true, exclude = "borrowedBy")
public class Book extends BaseEntity {

    @Column(nullable = false)
    private String title;

    @Column(nullable = false)
    private String author;

    @Column(nullable = false)
    private boolean available;

    @ManyToOne
    @JoinColumn(name = "borrowed_by")
    private User borrowedBy;

    
    @ManyToOne
    @JoinColumn(name = "admin_id")
    private Admin addedBy;
    @Column(name = "issue_date")
    private LocalDate issueDate;

    @Column(name = "due_date")
    private LocalDate dueDate;
//    private String dueDate;


    public Book(String title, String author, boolean available, User borrowedBy, Admin addedBy, int daysUntilDue) {
        this.title = title;
        this.author = author;
        this.available = available;
        this.borrowedBy = borrowedBy;
        this.addedBy = addedBy;
        this.issueDate = LocalDate.now(); // set today
        this.dueDate = this.issueDate.plusDays(daysUntilDue); // add days
    }


    
}


====================================================================================================
// File: src\main\java\com\cdac\entities\User.java
====================================================================================================

package com.cdac.entities;



import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;



import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Table(name = "user")
@NoArgsConstructor
@Getter
@Setter
@ToString(callSuper = true, exclude = "borrowedBy")
public class User extends BaseEntity implements UserDetails{
    @Column(nullable = false)
    private String name;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String password;
    @Enumerated(EnumType.STRING)
   	@Column(name = "user_role")
   	private UserRole role;
 // If you want to associate with a list of transactions or reviews, define them here
    @OneToMany(mappedBy = "borrowedBy", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List<Book> borrowedBooks;
	public User(String name, String email, String password, UserRole role, List<Book> borrowedBooks) {
		super();
		this.name = name;
		this.email = email;
		this.password = password;
		this.role = role;
		this.borrowedBooks = borrowedBooks;
	}
	public void removeFoodItem(Book book)
	{
		this.borrowedBooks.remove(book);
		book.setAddedBy(null);
	}
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		// TODO Auto-generated method stub
		return List.of(new SimpleGrantedAuthority(this.role.name()));
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return email;
	}
}

====================================================================================================
// File: src\main\java\com\cdac\entities\UserRole.java
====================================================================================================

package com.cdac.entities;

public enum UserRole {
	ROLE_USER, ROLE_ADMIN
}


====================================================================================================
// File: src\main\java\com\cdac\security\CustomUserDetailsServiceImpl.java
====================================================================================================

package com.cdac.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cdac.dao.AdminDao;
import com.cdac.dao.Userdao;

import lombok.AllArgsConstructor;

//@Service
//@Transactional
//@AllArgsConstructor
//public class CustomUserDetailsServiceImpl implements UserDetailsService {
//	private final Userdao userDao;
//	@Override
//	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
//		User user=userDao.findByEmail(email)
//				.orElseThrow(() -> 
//				new UsernameNotFoundException("Invalid email ....."));
//		//=> partial auth - email exists
//		return user;
//	}
//}



@Service
@Transactional
@AllArgsConstructor
public class CustomUserDetailsServiceImpl implements UserDetailsService {

    private final Userdao userDao;
    private final AdminDao adminDao;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        return userDao.findByEmail(email)
            .<UserDetails>map(user -> user)
            .or(() -> adminDao.findByEmail(email).map(admin -> admin))
            .orElseThrow(() -> new UsernameNotFoundException("Invalid email or admin email"));
    }
}
//@Service
//@Transactional
//public class CustomUserDetailsServiceImpl implements UserDetailsService {
//
//    private final Userdao userDao;
//    private final AdminDao adminDao;
//
//    @Autowired
//    public CustomUserDetailsServiceImpl(Userdao userDao, AdminDao adminDao) {
//        this.userDao = userDao;
//        this.adminDao = adminDao;
//    }
//
//    @Override
//    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
//        return userDao.findByEmail(email)
//                .<UserDetails>map(user -> user)
//                .orElseGet(() ->
//                    adminDao.findByEmail(email)
//                        .<UserDetails>map(admin -> admin)
//                        .orElseThrow(() -> new UsernameNotFoundException("Invalid email"))
//                );
//    }
//}
//


====================================================================================================
// File: src\main\java\com\cdac\security\JWTCustomFilter.java
====================================================================================================

package com.cdac.security;

import java.io.IOException;


import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AllArgsConstructor;

//create custom filter by extending from OncePerRequestFilter
//It will be executed once / every request
@Component //to declare it as a spring bean
@AllArgsConstructor
public class JWTCustomFilter extends OncePerRequestFilter{
	//verify JWT
	//depcy - JwtUtils
	private final JwtUtils jwtUtils;

	@Override
	protected void doFilterInternal(HttpServletRequest request, 
			HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		//1. Check for authorization req header
		String headerValue=request.getHeader("Authorization");
		//2. checking for not null n extract JWT
		if(headerValue != null && headerValue.startsWith("Bearer ")) {
			//3. => jwt - present , extract JWT
			String jwt=headerValue.substring(7);
			//4. verify the token using JWT utils class
			Authentication authentication = jwtUtils.populateAuthenticationTokenFromJWT(jwt);
			System.out.println("auth obj in filter "+authentication);
			//5. store this authentication object in spring sec ctx holder
			SecurityContextHolder.getContext().setAuthentication(authentication);
		}
		//to continue with remaining filter chain sequence
		filterChain.doFilter(request, response);
		
	}

}


====================================================================================================
// File: src\main\java\com\cdac\security\JwtUtils.java
====================================================================================================

package com.cdac.security;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import com.cdac.entities.User;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Component //to declare spring bean
@Slf4j
public class JwtUtils {
//inject the props in JWT Utils class for creating n validation of JWT
	/*
	 * @Value => injection of a value (<constr-arg name n value : xml tags) arg - Spring
	 * expression Lang - SpEL
	 */
	@Value("${SECRET_KEY}") // example of value injected as dependency , using SpEL
	private String jwtSecret;

	@Value("${EXP_TIMEOUT}")
	private int jwtExpirationMs;

	private SecretKey key;//=> represents symmetric key

	@PostConstruct
	public void init() {
		log.info("Key {} Exp Time {}",jwtSecret,jwtExpirationMs);
		//create secret key instance form its builder - Keys
		key = Keys.hmacShaKeyFor(jwtSecret.getBytes());
	}

	// will be invoked by UserSignIn  controller , upon successful
	// authentication
	public String generateJwtToken(Authentication authentication) {
		log.info("generate jwt token " + authentication);// contains verified user details
		//User userPrincipal = (User) authentication.getPrincipal();
		UserDetails userPrincipal = (UserDetails) authentication.getPrincipal();

		return Jwts.builder() // JWTs : a Factory class , used to create JWT tokens
				.subject((userPrincipal.getUsername())) // setting subject part of the token
				.issuedAt(new Date())// Sets the JWT Claims iat (issued at) value of current date
				.expiration(new Date((new Date()).getTime() + jwtExpirationMs))// Sets the JWT Claims exp
																				// (expiration) value.
				// setting a custom claim , to add granted authorities
				.claim("authorities", 
						getAuthoritiesInString(userPrincipal.getAuthorities()))
				// setting a custom claim , to add user id (remove it if not required in the
				// project)
			

				.signWith(key, Jwts.SIG.HS256) // Signs the constructed JWT using the specified
								// algorithm with the specified key, producing a
								// JWS(Json web signature=signed JWT)

				// Using token signing algo : HMAC using SHA-512
				.compact();// Actually builds the JWT and serializes it to a compact, URL-safe string
	}

	// this method will be invoked by our custom JWT filter
	public String getUserNameFromJwtToken(Claims claims) {
		return claims.getSubject();
	}

	// this method will be invoked by our custom JWT filter
	public Claims validateJwtToken(String jwtToken) {
		// try {
		Claims claims = Jwts.parser()

				.verifyWith(key) // sets the SAME secret key for JWT signature verification
				.build()

				// rets the JWT parser set with the Key
				.parseSignedClaims(jwtToken) // rets JWT with Claims added in the body
				.getPayload();// => JWT valid , rets the Claims(payload)
		/*
		 * parseClaimsJws - throws:UnsupportedJwtException -if the JWT body | payload
		 * does not represent any Claims JWSMalformedJwtException - if the JWT body |
		 * payload is not a valid JWSSignatureException - if the JWT signature
		 * validation fails ExpiredJwtException - if the specified JWT is expired
		 * IllegalArgumentException - if the JWT claims body | payload is null or empty
		 * or only whitespace
		 */
		return claims;
	}

	private List<String> getAuthoritiesInString(Collection<? extends GrantedAuthority> authorities) {
		return authorities.stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList());
	}

	// this method will be invoked by our custom JWT filter to get list of granted
	// authorities n store it in auth token
	public List<GrantedAuthority> getAuthoritiesFromClaims(Claims claims) {

		List<String> authorityNamesFromJwt = (List<String>) claims.get("authorities");
		List<GrantedAuthority> authorities = authorityNamesFromJwt.stream().map(SimpleGrantedAuthority::new)
				.collect(Collectors.toList());

		authorities.forEach(System.out::println);
		return authorities;
	}

	

	public Authentication populateAuthenticationTokenFromJWT(String jwt) {
		// validate JWT n retrieve JWT body (claims)
		Claims payloadClaims = validateJwtToken(jwt);
		// get user name from the claims
		String email = getUserNameFromJwtToken(payloadClaims);
		// get granted authorities as a custom claim
		List<GrantedAuthority> authorities = getAuthoritiesFromClaims(payloadClaims);
			// add user name/email , null:password granted authorities in Authentication object
		UsernamePasswordAuthenticationToken token = 
				new UsernamePasswordAuthenticationToken(email, null, authorities);
//		UsernamePasswordAuthenticationToken token = 
//				new UsernamePasswordAuthenticationToken(new User(email,"", authorities), null, authorities);
//	
		System.out.println("is authenticated " + token.isAuthenticated());// true
		return token;

	}

}


====================================================================================================
// File: src\main\java\com\cdac\security\SecurityConfiguration.java
====================================================================================================

package com.cdac.security;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import lombok.AllArgsConstructor;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@AllArgsConstructor
public class SecurityConfiguration {

    private final PasswordEncoder encoder;
    private final JWTCustomFilter jwtCustomFilter;

    @Bean
    SecurityFilterChain configureSecFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .formLogin(form -> form.disable())
            .authorizeHttpRequests(auth -> auth

                // public endpoints
                .requestMatchers(
                    "/v*/api-docs/**",
                    "/swagger-ui/**",
                    "/products/view",
                    "/auth/user/signup",
                    "/auth/admin/signup",
                    "/auth/user/signin",
                    "/auth/admin/signin"
                ).permitAll()

                // only ADMIN can add, delete or update books
                .requestMatchers(
                    "/books/add",
                    "/books/delete/**",
                    "/books/update/**"
                ).hasAuthority("ROLE_ADMIN")

                // both USER and ADMIN can fetch or soft delete books
                .requestMatchers(
                    "/books/get/**",
                    "/books/get",
                    "/books/softdelete/**"
                ).hasAnyAuthority("ROLE_USER", "ROLE_ADMIN")

                // all other endpoints require authentication
                .anyRequest().authenticated()
            )
            .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtCustomFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}



//
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
//import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.http.SessionCreationPolicy;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
//
//import lombok.AllArgsConstructor;
//
//@Configuration // to declare the as java config class
//// equivalent to bean config xml file
//@EnableWebSecurity // to enable spring sec config in this class
//@EnableMethodSecurity // to enable method level security
//@AllArgsConstructor
//public class SecurityConfiguration {
//	// depcy
//	private final PasswordEncoder encoder;
//	private final JWTCustomFilter jwtCustomFilter;
//
//	/*
//	 * Configure spring bean (@Bean) to configure spring securtiy filter chain
//	 * 
//	 */
//	@Bean
//	SecurityFilterChain configureSecFilterChain(HttpSecurity http) throws Exception {
//		// disable CSRF protection : since un necessary with stateless REST APIs
//	
//		http.csrf(csrf -> csrf.disable());
//		// form login is enabled by default , to disable it
//		http.formLogin(form -> form.disable());
//				// enable Basic HTTP auth
//			//	.httpBasic(Customizer.withDefaults());
//		// add URL based authorization rules
//		// un protected end points - swagger , view products
//		http.authorizeHttpRequests(request -> request
//				.requestMatchers("/v*/api-docs/**", "/swagger-ui/**", "/products/view","/auth/user/signup", "/auth/admin/signup", "/auth/user/signin", "/auth/admin/signin")
//				.permitAll()
//				// only admin should be allowed to add product
//				.requestMatchers("/books/add","/books/delete/**","/books/update/**").hasRole("ADMIN")
//				// only customer can purchase the product
//				.requestMatchers("/books/get/**","/books/get","/books/softdelete/**").hasRole("USER")
//				// any other request - can accessed only by authenticated users
//				.anyRequest().authenticated())
//				// tell Spring sec - not to create any HttpSession object
//				// to store spring security info
//				.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
//		//add custom jwt filter before 1st auth filter 
//		http.addFilterBefore(jwtCustomFilter, 
//				UsernamePasswordAuthenticationFilter.class);
//		// HttpSecurity class builds spring sec filter chain , as per above
//		// customizations
//		return http.build();
//	}
//
//	// configure spring bean - auth mgr
//	@Bean
//	AuthenticationManager authenticationManager
//	(AuthenticationConfiguration config) throws Exception {
//		return config.getAuthenticationManager();
//	}
//
//}




====================================================================================================
// File: src\main\java\com\cdac\service\AdminService.java
====================================================================================================

package com.cdac.service;


import com.cdac.dto.AddAdminDTO;
import com.cdac.dto.AdminDTO;

public interface AdminService {

   AdminDTO addAdmin(AddAdminDTO reqDTO);



	

}


====================================================================================================
// File: src\main\java\com\cdac\service\AdminServiceImp.java
====================================================================================================

package com.cdac.service;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cdac.custom_exceptions.ApiException;
import com.cdac.dao.AdminDao;
import com.cdac.dto.UserDTO;
import com.cdac.entities.Admin;
import com.cdac.dto.AddAdminDTO;
import com.cdac.dto.AdminDTO;
@Service
@Transactional
public class AdminServiceImp implements AdminService{
	@Autowired
	private AdminDao admindao;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private PasswordEncoder encoder;
	@Override
	public AdminDTO addAdmin(AddAdminDTO reqDTO) {
		if(admindao.existsByEmail(reqDTO.getEmail()))
			throw new ApiException("Dup email detected !!!!!!");
		//2. req dto -> entity (de ser)
		Admin entity=modelMapper.map(reqDTO, Admin.class);
		//encrypt password
		entity.setPassword(encoder.encode(entity.getPassword()));
		
		//3. save -> persistent entity -> resp dto (ser) 
		return modelMapper.map(admindao.save(entity),AdminDTO.class);
	}

	

}


====================================================================================================
// File: src\main\java\com\cdac\service\BookService.java
====================================================================================================

package com.cdac.service;


import com.cdac.dto.BookDTO;

import org.springframework.stereotype.Service;

import java.util.List;

public interface BookService {

    BookDTO createBook(BookDTO bookDTO);

    BookDTO updateBook(Long id, BookDTO bookDTO);

    List<BookDTO> getAllBooks();

    BookDTO getBookById(Long id);

    void deleteBook(Long id);

    void softDeleteBook(Long id);
}

====================================================================================================
// File: src\main\java\com\cdac\service\BookServiceImp.java
====================================================================================================

package com.cdac.service;

import java.util.List;
import java.util.stream.Collectors;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cdac.custom_exceptions.ResourceNotFoundException;
import com.cdac.dao.BookRepository;
import com.cdac.dto.BookDTO;

import com.cdac.entities.Book;

@Service
@Transactional
public class BookServiceImp implements BookService{

    private final ModelMapper modelMapper;

    @Autowired
    private BookRepository bookRepository;

    BookServiceImp(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

    public BookDTO createBook(BookDTO bookDTO) {
//        Book book = new Book();
//        book.setTitle(bookDTO.getTitle());
//        book.setAuthor(bookDTO.getAuthor());
//        book.setAvailable(bookDTO.isAvailable());
//        book = bookRepository.save(book);
//        bookDTO.setId(book.getId());
//        return bookDTO;
    	Book book = modelMapper.map(bookDTO, Book.class);

        // Optionally: set addedBy or borrowedBy if needed here
        // book.setAddedBy(...);

        book = bookRepository.save(book);
        bookDTO.setId(book.getId());
        return bookDTO;
    }

    public BookDTO updateBook(Long id, BookDTO bookDTO) {
        Book book = bookRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Book not found"));
        book.setTitle(bookDTO.getTitle());
        book.setAuthor(bookDTO.getAuthor());
        book.setAvailable(bookDTO.isAvailable());
        book = bookRepository.save(book);
        bookDTO.setId(book.getId());
        return bookDTO;
    }

    public List<BookDTO> getAllBooks() {      
        return bookRepository.findByAvailableTrue() //List<Entity>
				.stream() //Stream<Entity>
				.map(entity -> modelMapper.map(entity, BookDTO.class)) //Stream<DTO>
				.toList();
    }

    public BookDTO getBookById(Long id) {
        Book book = bookRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Book not found"));
         
        return modelMapper.map(book, BookDTO.class);
    }

    public void deleteBook(Long id) {
        if (!bookRepository.existsById(id)) {
            throw new RuntimeException("Book not found");
        }
        bookRepository.deleteById(id);
    }

	public void softDeleteBook(Long id) {
		Book book = bookRepository.findById(id)
		        .orElseThrow(() -> new ResourceNotFoundException("Book not found"));

		    book.setAvailable(false); 
		    bookRepository.save(book);
		
	}
}


====================================================================================================
// File: src\main\java\com\cdac\service\UserService.java
====================================================================================================

package com.cdac.service;

import com.cdac.dto.AddUserDTO;
import com.cdac.dto.UserDTO;

public interface UserService {

   UserDTO addUser(AddUserDTO reqDTO);

}


====================================================================================================
// File: src\main\java\com\cdac\service\UserServiceImp.java
====================================================================================================

package com.cdac.service;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cdac.custom_exceptions.ApiException;

import com.cdac.dao.Userdao;
import com.cdac.dto.AddUserDTO;
import com.cdac.dto.UserDTO;
import com.cdac.entities.User;
@Service
@Transactional
public class UserServiceImp implements UserService {
	@Autowired
	private Userdao userDao;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private PasswordEncoder encoder;

	@Override
	public UserDTO addUser(AddUserDTO reqDTO) {
			// 1. check for dup email
			if(userDao.existsByEmail(reqDTO.getEmail()))
				throw new ApiException("Dup email detected !!!!!!");
			//2. req dto -> entity (de ser)
			User entity=modelMapper.map(reqDTO, User.class);
			
			//encrypt password
			entity.setPassword(encoder.encode(entity.getPassword()));
			//3. save -> persistent entity -> resp dto (ser) 
			return modelMapper.map(userDao.save(entity),UserDTO.class);
	}

}


====================================================================================================
// File: src\test\java\com\examplelibrarymanagement\Librarymanagement1ApplicationTests.java
====================================================================================================

package com.examplelibrarymanagement;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class Librarymanagement1ApplicationTests {

	@Test
	void contextLoads() {
	}

}


====================================================================================================
// File: HELP.md
====================================================================================================

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.5.0/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.5.0/maven-plugin/build-image.html)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.



====================================================================================================
// File: .mvn\wrapper\maven-wrapper.properties
====================================================================================================

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip


====================================================================================================
// File: src\main\resources\application.properties
====================================================================================================

spring.application.name=librarymanagement
spring.datasource.url=jdbc:mysql://localhost:3306/librarydb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=cdac
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

SECRET_KEY=pfRwON+PkE9ZRqd77LsBRCgXYBjmikYO73n+nNBixre9UJyAd4o3825UBagpqv4v
#JWT expiration timeout in msec : 24*3600*1000 - 1day
EXP_TIMEOUT=86400000


====================================================================================================
// File: pom.xml
====================================================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>librarymanagement</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>librarymanagement</name>
	<description>Shelf Wise Project</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-api</artifactId>
    <version>0.12.6</version>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-impl</artifactId>
    <version>0.12.6</version>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-jackson</artifactId>
    <version>0.12.6</version>
    <scope>runtime</scope>
</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		 <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>3.2.3</version>
		</dependency>
    <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
</dependency>

<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.8.8</version>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
